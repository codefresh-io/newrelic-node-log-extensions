/*
 * Copyright 2020 New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict'

const tap = require('tap')
const truncate = require('../../lib/truncate')

tap.test('Should truncate string > 1024 chars', (t) => {
  const longString =
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111' +
    '1111111111111111111111111111111111111111111111111111111111111111'

  const processedStr = truncate(longString)

  t.equal(processedStr.length, 1024)
  t.equal(processedStr.substring(processedStr.length - 3), '...')

  t.end()
})

tap.test('Should return non-truncated string when <= 1024 chars', (t) => {
  const str = 'kenny loggins'

  const processedStr = truncate(str)

  t.equal(processedStr, str)
  t.end()
})
;[
  { value: '', type: 'empty string' },
  { value: undefined, type: 'undefined' },
  { value: null, type: 'null' },
  { value: {}, type: 'object' },
  { value: [], type: 'array' },
  { value: function () {}, type: 'function' }
].forEach(({ value, type }) => {
  tap.test(`should not truncate ${type}`, (t) => {
    const newValue = truncate(value)
    t.same(value, newValue)
    t.end()
  })
})
